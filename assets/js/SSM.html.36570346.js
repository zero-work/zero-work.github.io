"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[3243],{3671:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}},6860:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>o,data:()=>i});var t=a(7847);const e=[(0,t.Fv)('<h1 id="ssm框架" tabindex="-1"><a class="header-anchor" href="#ssm框架"><span>SSM框架</span></a></h1><h2 id="spring-ioc" tabindex="-1"><a class="header-anchor" href="#spring-ioc"><span>Spring IOC</span></a></h2><h3 id="spring-常用注解" tabindex="-1"><a class="header-anchor" href="#spring-常用注解"><span>Spring 常用注解</span></a></h3><p>1.声明Bean注解</p><ul><li>@Component:用于表示Bean对象，可以在任何层下使用</li><li>@Repository:用于数据层（Dao）的类表示为Bean对象</li><li>@Service:用于业务逻辑层（Service）的类表示为Bean对象</li><li>@Controller:用于控制器组件类（Controller）</li></ul><p>2.注入Bean的注解 （对于变量、方法、构造方法进行标注，完成自动装配的工作）</p><ul><li>@Autowired：默认按照Bean的类型进行装配</li><li>@Resource：默认按照名称来装配</li><li>@Qualifier：与@Autowired注解配合使用，当使用Autowired需要按照名称来装配时，就需要跟Qualifier注解一起使用。</li></ul><h3 id="基于注解的依赖注解" tabindex="-1"><a class="header-anchor" href="#基于注解的依赖注解"><span>基于注解的依赖注解</span></a></h3><p><strong>Spring Ioc容器负责创建和注入Bean。Spring提供使用XML配置、注解、Java配置以及groovy配置实现Bean的创建和注入。</strong></p><ul><li>@Repository(&quot;[Dao实现类]&quot;)</li><li>@Service(&quot;[Service实现类]&quot;)</li><li>@Controller <strong>Controller类名上</strong></li><li>@Configuration <strong>声明当前类是一个配置类，相当于Spring中的XMl配置文件</strong> @ComponentScan(&quot;[包名]&quot;) <strong>自动扫描包名下的注解，并注册为Bean</strong><em>相当于Spring中XML配置中的&lt;context：component-scan base-package=&quot;Bean所在包路径&quot;&gt;</em></li></ul><h3 id="java配置" tabindex="-1"><a class="header-anchor" href="#java配置"><span>Java配置</span></a></h3><p><em>Dao、Service、Controller层都不需要使用注解</em></p><ul><li>创建配置类</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaConfig</span><span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Bean</span>\n    <span class="token keyword">public</span> <span class="token class-name">TestDao</span> <span class="token function">getTestDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TestDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token annotation punctuation">@Bean</span>\n    <span class="token keyword">public</span> <span class="token class-name">TestService</span> <span class="token function">getTestService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">TestService</span> ts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 使用set方法注入testDao</span>\n        ts<span class="token punctuation">.</span><span class="token function">setTestDao</span><span class="token punctuation">(</span><span class="token function">getTestDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> ts<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token annotation punctuation">@Bean</span>\n    <span class="token keyword">public</span> <span class="token class-name">TestController</span> <span class="token function">getTestController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">TestController</span> tc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 使用set方法注入</span>\n        tc<span class="token punctuation">.</span><span class="token function">getTestService</span><span class="token punctuation">(</span> <span class="token function">getTestService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> tc<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="spring-aop" tabindex="-1"><a class="header-anchor" href="#spring-aop"><span>Spring AOP</span></a></h2><p><strong>提供了面向切面编程实现，多用于在事务处理、日志记录、安全控制等操作中被广泛使用。</strong></p><h4 id="aop术语" tabindex="-1"><a class="header-anchor" href="#aop术语"><span>AOP术语</span></a></h4><ul><li>切面：封装横切到系统功能的类</li><li>连接点：程序运行中的一些时间点，如方法的调用或者异常的抛出。</li><li>切入点：那些需要进行处理的连接点</li><li>通知：由切面添加到特定的连接点的一段代码（通知是切面的具体实现）</li><li>引入：允许在现有的实现类中添加自定义方法和属性</li><li>目标对象：所有被通知的对象</li><li>代理：通知应用到目标对象之后，被动态创建的对象</li><li>织入：将切面代码插入到目标对象上，从而生成代理对象的过程</li></ul><h3 id="基于注解开发aspectj" tabindex="-1"><a class="header-anchor" href="#基于注解开发aspectj"><span>基于注解开发AspectJ</span></a></h3><ul><li>环绕通知：在目标方法执行前和执行后实施增强的，可以用于日志记录、事务处理等</li><li>前置通知：在目标方法前实施增强的，用于权限管理</li><li>后置返回通知：目标方法成功执行后实施增强的，可以用于关闭流、删除临时文件等</li><li>后置最终通知：目标方法执行后实施增强的，不管方法是否执行成功，用于释放资源</li><li>异常通知：方法抛出异常后实施增强的，用于处理异常、记录日志等</li><li>引入通知：在目标类中添加一些新的方法或者属性，用于修改目标类</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token annotation punctuation">@Aspect</span>  <span class="token comment">// 定义一个切面，注解在切面类上</span>\n <span class="token annotation punctuation">@Pointcut</span>  <span class="token comment">// 用于定义切入点表达式</span>\n <span class="token annotation punctuation">@Before</span>  <span class="token comment">// 定义前置通知</span>\n <span class="token annotation punctuation">@AfterReturning</span>  <span class="token comment">// 定义后置返回通知</span>\n <span class="token annotation punctuation">@Around</span>  <span class="token comment">// 定义环绕通知</span>\n <span class="token annotation punctuation">@AfterThrowing</span>  <span class="token comment">// 定义异常通知</span>\n <span class="token annotation punctuation">@After</span>  <span class="token comment">// 定义后置最终通知</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>实例代码</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 使用Repository注解写好Dao层与DaoImpl层</span>\n\n<span class="token comment">// 定义切面类</span>\n<span class="token annotation punctuation">@Aspect</span>  <span class="token comment">// @Aspect声明一个切面</span>\n<span class="token annotation punctuation">@Component</span>  <span class="token comment">// @Component 设置当前类被Spring管理为Bean</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">&quot;execution(* aspect.dap.*.(..))&quot;</span><span class="token punctuation">)</span>   <span class="token comment">// （）内的是切入点表达式，匹配包中任意方法的执行</span>\n<span class="token comment">/*\nexecution( )  // 表示式主体\n*  // 返回类型 *代表所有类型\naspect.dao  // 需要匹配的包名\n*.*  // 第一个*代表包下所有类，第二个代表类下所有方法\n（..）  // 表示方法的参数，.. 代表了所有参数\n*/</span>\n<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">myPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>\n\n<span class="token comment">// 前置通知 使用Jpinpoint接口作为参数获取目标对象信息</span>\n<span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">&quot;myPointcut()&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// myPointcut()是切入点的定义方法</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> jp<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>\n\n<span class="token comment">// 后置通知</span>\n<span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span><span class="token string">&quot;myPointcut()&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturning</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> jp<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>\n\n<span class="token comment">/*\n环绕通知\nProceedingJoinPoint 是JoinPoint子接口  代表可以执行的目标方法\n返回值必须为Object\n必须一个参数是ProceedingJoinPoint类型\n必须throws Throwable\n*/</span>\n<span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">&quot;myPointcut()&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">around</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> pjp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>\n\n<span class="token comment">// 异常通知</span>\n<span class="token class-name">AfterThrowing</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">&quot;myPointcut()&quot;</span> <span class="token punctuation">,</span>throwing <span class="token operator">=</span> <span class="token string">&quot;e&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">except</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>\n\n<span class="token comment">// 后置最终通知</span>\n<span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">&quot;myPointcut()&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n\n\n<span class="token comment">// 设置aspectj的配置类</span>\n\n<span class="token annotation punctuation">@Configuration</span>  <span class="token comment">// 声明配置类</span>\n<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">&quot;aspectj&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// 自动扫描aspectj包下的注解</span>\n<span class="token annotation punctuation">@EnableAspectJAutoProxy</span>  <span class="token comment">// 开启spring对AspectJ的支持</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AspectJAOPConfig</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>\n\n<span class="token comment">// 测试类</span>\n<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">AnnotationConfigApplication</span> appCon<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">AspectJAOPConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">TestDao</span> testDao <span class="token operator">=</span> appCon<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">TestDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 下面正常调用方法即可</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',23)],p={},o=(0,a(3671).A)(p,[["render",function(n,s){return(0,t.uX)(),(0,t.CE)("div",null,e)}]]),i=JSON.parse('{"path":"/code/SSM.html","title":"SSM框架","lang":"zh-CN","frontmatter":{"description":"SSM框架 Spring IOC Spring 常用注解 1.声明Bean注解 @Component:用于表示Bean对象，可以在任何层下使用 @Repository:用于数据层（Dao）的类表示为Bean对象 @Service:用于业务逻辑层（Service）的类表示为Bean对象 @Controller:用于控制器组件类（Controller） 2...","head":[["meta",{"property":"og:url","content":"https://zerp-work.github.io/code/SSM.html"}],["meta",{"property":"og:site_name","content":"LearnData-开源笔记"}],["meta",{"property":"og:title","content":"SSM框架"}],["meta",{"property":"og:description","content":"SSM框架 Spring IOC Spring 常用注解 1.声明Bean注解 @Component:用于表示Bean对象，可以在任何层下使用 @Repository:用于数据层（Dao）的类表示为Bean对象 @Service:用于业务逻辑层（Service）的类表示为Bean对象 @Controller:用于控制器组件类（Controller） 2..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-29T13:01:30.000Z"}],["meta",{"property":"article:author","content":"lzzie"}],["meta",{"property":"article:modified_time","content":"2024-02-29T13:01:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SSM框架\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-29T13:01:30.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"lzzie\\",\\"url\\":\\"https://zerp-work.github.io\\"}]}"]]},"headers":[{"level":2,"title":"Spring IOC","slug":"spring-ioc","link":"#spring-ioc","children":[{"level":3,"title":"Spring 常用注解","slug":"spring-常用注解","link":"#spring-常用注解","children":[]},{"level":3,"title":"基于注解的依赖注解","slug":"基于注解的依赖注解","link":"#基于注解的依赖注解","children":[]},{"level":3,"title":"Java配置","slug":"java配置","link":"#java配置","children":[]}]},{"level":2,"title":"Spring AOP","slug":"spring-aop","link":"#spring-aop","children":[{"level":3,"title":"基于注解开发AspectJ","slug":"基于注解开发aspectj","link":"#基于注解开发aspectj","children":[]}]}],"git":{"createdTime":1709211690000,"updatedTime":1709211690000,"contributors":[{"name":"Lzzie","email":"18560827885@163.com","commits":1}]},"readingTime":{"minutes":3.92,"words":1176},"filePathRelative":"code/SSM.md","localizedDate":"2024年2月29日","excerpt":"\\n<h2>Spring IOC</h2>\\n<h3>Spring 常用注解</h3>\\n<p>1.声明Bean注解</p>\\n<ul>\\n<li>@Component:用于表示Bean对象，可以在任何层下使用</li>\\n<li>@Repository:用于数据层（Dao）的类表示为Bean对象</li>\\n<li>@Service:用于业务逻辑层（Service）的类表示为Bean对象</li>\\n<li>@Controller:用于控制器组件类（Controller）</li>\\n</ul>\\n<p>2.注入Bean的注解 （对于变量、方法、构造方法进行标注，完成自动装配的工作）</p>\\n<ul>\\n<li>@Autowired：默认按照Bean的类型进行装配</li>\\n<li>@Resource：默认按照名称来装配</li>\\n<li>@Qualifier：与@Autowired注解配合使用，当使用Autowired需要按照名称来装配时，就需要跟Qualifier注解一起使用。</li>\\n</ul>","autoDesc":true}')}}]);